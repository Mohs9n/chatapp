// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: friend_request.sql

package db

import (
	"context"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :exec
UPDATE friend_requests
SET status = 'accepted'
WHERE sender_id = $1 AND receiver_id = $2
`

type AcceptFriendRequestParams struct {
	SenderID   int32
	ReceiverID int32
}

func (q *Queries) AcceptFriendRequest(ctx context.Context, arg AcceptFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptFriendRequest, arg.SenderID, arg.ReceiverID)
	return err
}

const createFriendRequest = `-- name: CreateFriendRequest :exec
INSERT INTO friend_requests (sender_id, receiver_id)
VALUES ($1, $2)
`

type CreateFriendRequestParams struct {
	SenderID   int32
	ReceiverID int32
}

func (q *Queries) CreateFriendRequest(ctx context.Context, arg CreateFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, createFriendRequest, arg.SenderID, arg.ReceiverID)
	return err
}

const getFriendRequests = `-- name: GetFriendRequests :many
SELECT u.firstname, u.lastname, u.username, f.status, f.Id
FROM friend_requests f
JOIN users u ON f.receiver_id = u.id
WHERE f.receiver_id = $1
`

type GetFriendRequestsRow struct {
	Firstname string
	Lastname  string
	Username  string
	Status    string
	ID        int32
}

func (q *Queries) GetFriendRequests(ctx context.Context, receiverID int32) ([]GetFriendRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendRequests, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendRequestsRow
	for rows.Next() {
		var i GetFriendRequestsRow
		if err := rows.Scan(
			&i.Firstname,
			&i.Lastname,
			&i.Username,
			&i.Status,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
